# Generated by Django 3.2.13 on 2022-10-18 09:13

import cloudinary_storage.storage
import core.utils.base_upload
import core.utils.validators
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('strategy_deck', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('task_type', models.CharField(choices=[('qualitative', 'Qualitative'), ('quantitative', 'Quantitative'), ('quantitative_and_qualitative', 'Quantitative And Qualitative')], max_length=255)),
                ('routine_round', models.PositiveIntegerField(default=1)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('duration', models.DurationField(default=datetime.timedelta(0))),
                ('routine_option', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('once', 'Once')], max_length=255)),
                ('repeat_every', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('occurs_days', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], max_length=13, null=True)),
                ('occurs_month_day_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('occurs_month_day_position', models.CharField(blank=True, choices=[('first', 'First'), ('second', 'Second'), ('third', 'Third'), ('fourth', 'Fourth'), ('last', 'Last')], max_length=255, null=True)),
                ('occurs_month_day', models.CharField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], max_length=255, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('after_occurrence', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('task_status', models.CharField(choices=[('pending', 'pending'), ('active', 'active'), ('over_due', 'over due'), ('awaiting_rating', 'awaiting rating'), ('rework', 'rework'), ('rework_over_due', 'rework over due'), ('closed', 'closed')], db_index=True, default='pending', max_length=255)),
                ('target_brief', models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to=core.utils.base_upload.Upload('task_brief/'))),
                ('turn_around_time_target_point', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('turn_around_time_target_point_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('rework_limit', models.PositiveIntegerField(default=0)),
                ('rework_remark', models.TextField(blank=True, null=True)),
                ('rework_end_time', models.TimeField(blank=True, null=True)),
                ('rework_end_date', models.DateField(blank=True, null=True)),
                ('quantity_target_unit', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('quantity_target_unit_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('quantity_target_point', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('quantity_target_point_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('quality_target_point', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('quality_target_point_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('target_point', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('target_point_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('sensitivity_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('plagiarism_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('average_system_based_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('rating_remark', models.TextField(blank=True, null=True)),
                ('use_owner_submission', models.BooleanField(default=True)),
                ('upline_initiative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='initiative_task', to='strategy_deck.initiative', to_field='initiative_id')),
            ],
            options={
                'ordering': ['start_date', 'start_time', '-id'],
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_submission_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('submission', models.FileField(db_index=True, null=True, storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='tasks_submission/', validators=[core.utils.validators.validate_file_extension_for_pdf])),
                ('quantity_target_unit_achieved', models.DecimalField(decimal_places=2, default=0.0, max_digits=18)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_submission', to='tasks.task')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submission_user', to=settings.AUTH_USER_MODEL, to_field='user_id')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
    ]
